1. Describe an analogy for relating an algorithm that has
efficiency O(1) and another algorithm that has O(2n). An example would be:


An algorithm with efficiency O(1) is like a snap of a finger when compared to a O(2n) which
is like standing in a line at the supermarket while people may skip you and have dozens of items
in their cart.



2. In plain English, what is the best case scenario for binary search?
The best case scenario for binary search is when the search value is found in one iteration and comparison.
This happens when the search value is equal to the first designated middle item of the array.


3. In plain English, what is the worst-case scenario for binary search?
The worst case scenario of binary search occurs when the search value is NOT in the collection
and the size of the array is cut in half until we are down to one unit.
This would take log n iterations.

4. In plain English, what is the bounded-case scenario for binary search?
In binary search, the bounded case scenario for binary search lies between
0(1) which is best case and log n which is worst case.

5.Create a graph using the data below. Here's a CSV with the values you'll need.
SEE attached graph


6. What is the limit of the function above as n approaches infinity?
As n approaches infinity the limit of the function approaches +infinity.

7. What is the Big-O of an algorithm that has the data points above?
Big-O notation, or worst case performance, of the algorithm above is log(base 2)n.


8. Write a Ruby method that takes a number n.
This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n.
Use it to generate a table of worst-case iterations of collections up to size 10.

Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

SEE attached graph


9.What is the Big-O of binary search?
The Big-0 of binary search, the worst case performance scenario, in log(base 2)n where n is the number of items
in the sorted array.

10.What is the Big-Ω of binary search?
The Big Omega of binary search, or best case, scenario is 0(1) (Big-O of constant time) where regardless of the size of the array, it just so happens
that the search value is the same as the first middle item in the first iteration of binary search.


11. What is the Big-Ө of binary search?
Big-Ө of binary search lies between 0(1) and log(base 2)n.
